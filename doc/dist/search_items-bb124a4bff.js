searchNodes=[{"doc":"Cashtrail is an application to track and manage money. Cashtrail keeps the contexts that define your domain and business logic. Contexts are also responsible for managing your data, regardless if it comes from the database, an external API, or others.","ref":"Cashtrail.html","title":"Cashtrail","type":"module"},{"doc":"Cashtrail.Banking keeps the business logic related Currencies, Accounts, and Transactions of the entity, each in their respective contexts. Cashtrail.Banking.Currencies - Manages the currencies of the entity. Cashtrail.Banking.Accounts - Manages the bank accounts of the entity. Cashtrail.Banking.Transactions - Manages the transactions of the entity. Cashtrail.Banking.CreditCards - Manages the credit cards of the entity.","ref":"Cashtrail.Banking.html","title":"Cashtrail.Banking","type":"module"},{"doc":"The Currencies context manages the currencies data of one entity. See Cashtrail.Banking.Currencies.Currency to have more info about what currencies mean in the application.","ref":"Cashtrail.Banking.Currencies.html","title":"Cashtrail.Banking.Currencies","type":"module"},{"doc":"Returns an %Ecto.Changeset{} for tracking currency changes. Expected Arguments currency - The %Cashtrail.Banking.Currencies.Currency{} to be tracked. Examples iex&gt; change_currency(currency) %Ecto.Changeset{source: %Currency{}}","ref":"Cashtrail.Banking.Currencies.html#change_currency/1","title":"Cashtrail.Banking.Currencies.change_currency/1","type":"function"},{"doc":"Creates a currency. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the currency references. params - A map with the params of the currency to be created: :description (required) - A string that is the description of the currency. :type - A string that is the type of currency. It can receive &quot;money&quot;, &quot;digital_currency&quot;, &quot;miles&quot;, &quot;cryptocurrency&quot; or &quot;other&quot;. Defaults to &quot;money&quot;. :iso_code - A string that is the ISO 4217 code of the currency. Must be unique for the entity and have the exact 3 characters. :symbol - A string that is the symbol of the currency. :format - A string that represents the format of the currency. The &quot;%s&quot; refers to the :symbol field, and the &quot;%n&quot; refers to the number. Defaults to &quot;%s%n&quot;. :precision - A integer that represents how much decimal places the currency has. Defaults to 0. :separator - A string that is used to separate the integer part from the fractional part of the currency. It must have an exact one character or be empty. Defaults to &quot;.&quot;. :delimiter - A string that is used to separate the thousands parts of the currency. Defaults to &quot;.&quot;. :active - A boolean that says if the currency is active and should be displayed in lists of the application. Defaults to true. See Cashtrail.Banking.Currencies.Currency to have more detailed info about the fields. Returns {:ok, %Cashtrail.Banking.Currencies.Currency{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; create_currency(entity, %{field: value}) {:ok, %Currency{}} iex&gt; create_currency(entity, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Banking.Currencies.html#create_currency/2","title":"Cashtrail.Banking.Currencies.create_currency/2","type":"function"},{"doc":"Deletes a currency. Expected Arguments currency - The %Cashtrail.Banking.Currencies.Currency{} to be deleted. Returns {:ok, %Cashtrail.Banking.Currencies.Currency{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; delete_currency(currency) {:ok, %Currency{}} iex&gt; delete_currency(currency) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Banking.Currencies.html#delete_currency/1","title":"Cashtrail.Banking.Currencies.delete_currency/1","type":"function"},{"doc":"Gets a single currency. Raises Ecto.NoResultsError if the Currency does not exist. See Cashtrail.Banking.Currencies.Currency to have more detailed info about the returned struct. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the currency references. id - A string that is the unique id of the currency to be found. Examples iex&gt; get_currency!(entity, 123) %Currency{} iex&gt; get_currency!(entity, 456) ** (Ecto.NoResultsError)","ref":"Cashtrail.Banking.Currencies.html#get_currency!/2","title":"Cashtrail.Banking.Currencies.get_currency!/2","type":"function"},{"doc":"Returns a %Cashtrail.Paginator.Page{} struct with a list of currencies in the :entries field. If no currencies are found, return an empty list in the :entries field. Expected arguments entity - The %Cashtrail.Entities.Entity{} that the currency references. options - A keyword list of the following options: :filter - filters by following attributes: :type or &quot;type&quot; :active or &quot;active&quot; :search - search currencies by :description, :iso_code and :symbol. See Cashtrail.Paginator.paginate/2 to know about the pagination options. See Cashtrail.Banking.Currencies.Currency to have more detailed info about each field to be filtered or searched. Examples iex&gt; list_currencies(entity) %Cashtrail.Paginator.Page{entries: [%Currency{}, ...], ...} iex&gt; list_currencies(entity, page: 2) %Cashtrail.Paginator.Page{entries: [%Currency{}, ...], page: 2} iex&gt; list_currencies(entity, filter: %{type: &quot;money&quot;}) %Cashtrail.Paginator.Page{entries: [%Currency{type: &quot;money&quot;}, ...]} iex&gt; list_currencies(entity, filter: %{search: &quot;my&quot;}) %Cashtrail.Paginator.Page{entries: [%Currency{description: &quot;my money&quot;}, ...]}","ref":"Cashtrail.Banking.Currencies.html#list_currencies/2","title":"Cashtrail.Banking.Currencies.list_currencies/2","type":"function"},{"doc":"Updates a currency. Expected Arguments currency - The %Cashtrail.Banking.Currencies.Currency{} to be updated. params - A map with the field of the currency to be updated. See create_currency/2 to know about the params that can be given. Returns {:ok, %Cashtrail.Banking.Currencies.Currency{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; update_currency(currency, %{field: new_value}) {:ok, %Currency{}} iex&gt; update_currency(currency, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Banking.Currencies.html#update_currency/2","title":"Cashtrail.Banking.Currencies.update_currency/2","type":"function"},{"doc":"","ref":"Cashtrail.Banking.Currencies.html#t:currency/0","title":"Cashtrail.Banking.Currencies.currency/0","type":"type"},{"doc":"This is an Ecto.Schema struct that represents a currency of the entity. Warning: Don&#39;t use the functions of this module. Only use this module as a struct to represent a currency. The functions of this module are internal and can change over time. Only manipulate currencies through the Cashtrail.Banking.Currencies that is the context for this. Definition According to Investopedia, the currency is any form when in use or circulation as a medium of exchange. This can be any system of money in common use by people. The common examples of currencies are Brazilia, reais (R$), U.S. dollars (US$), euros (€), Japanese yen (¥), and pounds sterling (£). There are cryptocurrencies too. In this application, you don&#39;t have to be stuck with that definition. You can register any means of exchange you use as a currency. It could be your airline miles, some other kind of currency that you use in any community. Anything you want to track can be registered as a currency. Just know that a bank account can only have one currency registered. And all transactions will be performed in that currency. The only way to convert a currency to another is through a special form of transaction called &#39;exchange&#39;. So you can use this to track your expenses in another currency on one travel or track your miles usage. Each entity will have their currencies, then you can register or delete currencies without worries. So you are free to define how you will use this feature. Fields :id - The unique id of the currency. :description - The description of the currency. :type - The type of currency. Can be: &quot;money&quot; - ordinary currencies like dollars, euro, yen, etc. This is the default value if no type is chosen. &quot;cryptocurrency&quot; - digital currencies that use cryptographical functions to conduct financial transactions. &quot;virtual&quot; - unregulated digital currencies, used and accepted among the members of a specific virtual community. For example loyalty points, game points, etc. &quot;other&quot; - other types of currencies that don&#39;t match the previous categories. :iso_code - The ISO 4217 code of the currency. :active - Says if the currency is active or not. :symbol - The symbol of the currency, like R$, US$, €, ¥, or £ for example. :precision - Every currency can have a different number of decimal places. For example, the dinar has three decimal places, dollar two, and yen zero. This field can be used to help round and format the amounts for the currency correctly. :separator - The field can be used to separate the integer part from the fractional part of the currency. :delimiter - The field can be used to separate the thousands parts of the currency. :format - This field can be used to know in what format the symbol and the number should be displayed. The &quot;%s&quot; represents the symbol, and the &quot;%n&quot; represents the number. So, if you format 100 dollars using &quot;%s %n&quot; the expected format will be &quot;US$ 100.00&quot;. This field, as the :precision, :separator and :delimiter, only brings a reference to be used by the libraries that will perform the currency formating. :inserted_at - When the currency was inserted at the first time. :updated_at - When the currency was updated at the last time. See Cashtrail.Banking.Currencies to know how to list, get, insert, update, and delete currencies.","ref":"Cashtrail.Banking.Currencies.Currency.html","title":"Cashtrail.Banking.Currencies.Currency","type":"module"},{"doc":"","ref":"Cashtrail.Banking.Currencies.Currency.html#t:t/0","title":"Cashtrail.Banking.Currencies.Currency.t/0","type":"type"},{"doc":"The Contacts context manages the contact data of one entity. See Cashtrail.Contacts.Contact to have more info about what contacts mean in the application.","ref":"Cashtrail.Contacts.html","title":"Cashtrail.Contacts","type":"module"},{"doc":"Returns an %Ecto.Changeset{} for tracking contact category changes. Expected Arguments category - The %Cashtrail.Contacts.Category{} to be tracked. Examples iex&gt; change_category(category) %Ecto.Changeset{source: %Category{}}","ref":"Cashtrail.Contacts.html#change_category/1","title":"Cashtrail.Contacts.change_category/1","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for tracking contact changes. Expected Arguments category - The %Cashtrail.Contacts.Contact{} to be tracked. Examples iex&gt; change_contact(contact) %Ecto.Changeset{source: %Contact{}}","ref":"Cashtrail.Contacts.html#change_contact/1","title":"Cashtrail.Contacts.change_contact/1","type":"function"},{"doc":"Creates a contact category. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the category references. params - A map with the params of the category to be created: :description (required) - A string with the description of the category. See Cashtrail.Contacts.Category to have more detailed info about the fields. Returns {:ok, %Cashtrail.Contacts.Category{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; create_category(entity, %{field: value}) {:ok, %Category{}} iex&gt; create_category(entity, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Contacts.html#create_category/2","title":"Cashtrail.Contacts.create_category/2","type":"function"},{"doc":"Creates a contact. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the category references. params - A map with the params of the contact to be created: :name (required) - A string with the description of the contact. :type (required) - A string with the type of contact. It can receive &quot;company&quot; or &quot;person&quot;. Defaults to &quot;company&quot;. :legal_name - A string that is the legal name of the contact. :customer - A boolean that says if the contact is a customer. Defaults to false. :supplier - A boolean that says if the contact is a supplier. Defaults to false. :phone - A string with the contact phone number. It can receive any phone number format. :email - A string with the contact email. :category_id - A string with the id of Cashtrail.Contacts.Category that relates to the contact. :address - A map containing the address of the contact: :street - A string with the street of the contact address. :number - A string with the number of the contact address. :complement - A string with the complement of the contact address. :district - A string with the district of the contact address. :city - A string with the city of the contact address. :state - A string with the state or province of the contact address. :country - A string with the country of the contact address. :zip - A string with the zip code of the contact address. You can insert whatever the zip code of any country you want. :line_1 - A string with line 1 of the contact address, if preferred. :line_2 - A string with line 2 of the contact address, if preferred. See Cashtrail.Contacts.Contact to have more detailed info about the fields of the contact, and Cashtrail.Contacts.Address to have more detailed info about the field of the address. Returns {:ok, %Cashtrail.Contacts.Contact{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; create_contact(entity, %{field: value}) {:ok, %Contact{}} iex&gt; create_contact(entity, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Contacts.html#create_contact/2","title":"Cashtrail.Contacts.create_contact/2","type":"function"},{"doc":"Deletes a contact category. Expected Arguments category - The %Cashtrail.Contacts.Category{} to be deleted. Returns {:ok, %Cashtrail.Contacts.Category{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; delete_category(category) {:ok, %Category{}} iex&gt; delete_category(category) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Contacts.html#delete_category/1","title":"Cashtrail.Contacts.delete_category/1","type":"function"},{"doc":"Deletes a contact. Expected Arguments contact - The %Cashtrail.Contacts.Contact{} to be deleted. Returns {:ok, %Cashtrail.Contacts.Contact{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; delete_contact(contact) {:ok, %Contact{}} iex&gt; delete_contact(contact) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Contacts.html#delete_contact/1","title":"Cashtrail.Contacts.delete_contact/1","type":"function"},{"doc":"Gets a single contact category. Raises Ecto.NoResultsError if the Category does not exist. See Cashtrail.Contacts.Category to have more detailed info about the returned struct. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the category references. id - A string that is the unique id of the category to be found. Examples iex&gt; get_category!(entity, 123) %Category{} iex&gt; get_category!(entity, 456) ** (Ecto.NoResultsError)","ref":"Cashtrail.Contacts.html#get_category!/2","title":"Cashtrail.Contacts.get_category!/2","type":"function"},{"doc":"Gets a single contact. Raises Ecto.NoResultsError if the Contact does not exist. See Cashtrail.Contacts.Contact to have more detailed info about the returned struct. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the contact references. id - A string that is the unique id of the contact to be found. Examples iex&gt; get_contact!(entity, 123) %Contact{} iex&gt; get_contact!(entity, 456) ** (Ecto.NoResultsError)","ref":"Cashtrail.Contacts.html#get_contact!/2","title":"Cashtrail.Contacts.get_contact!/2","type":"function"},{"doc":"Returns a %Cashtrail.Paginator.Page{} struct with a list of contact categories in the :entries field. Expected arguments entity - The %Cashtrail.Entities.Entity{} that the category references. options - A keyword list of the following options: :search - search categories by its :description. See Cashtrail.Paginator.paginate/2 to know about the pagination options. Examples iex&gt; list_categories(entity) %Cashtrail.Paginator{entries: [%Contacts.Category{}, ...]} iex&gt; list_categories(entity, search: &quot;My desc&quot;) %Cashtrail.Paginator{entries: [%Contacts.Category{description: &quot;My Description&quot;}, ...]}","ref":"Cashtrail.Contacts.html#list_categories/2","title":"Cashtrail.Contacts.list_categories/2","type":"function"},{"doc":"Returns a %Cashtrail.Paginator.Page{} struct with a list of contacts in the :entries field. Expected arguments entity - The %Cashtrail.Entities.Entity{} that the contact references. options - A keyword list of the following options: :filter - filters by following attributes: :type or &quot;type&quot; :customer or &quot;customer&quot; :supplier or &quot;supplier&quot; :category_id or &quot;category_id&quot; :search - search contacts by :name or :legal_name. See Cashtrail.Paginator.paginate/2 to know about the pagination options. See Cashtrail.Contacts.Contact to have more detailed info about the fields to be filtered or searched. Examples iex&gt; list_contacts(entity) %Cashtrail.Paginator{entries: [%Contact{}, ...]} iex&gt; list_contacts(entity, filter: %{type: &quot;company&quot;}) %Cashtrail.Paginator{entries: [%Contact{type: &quot;company&quot;}, ...]} iex&gt; list_contacts(entity, search: &quot;my&quot;) %Cashtrail.Paginator{entries: [%Contact{name: &quot;My name&quot;}, ...]}","ref":"Cashtrail.Contacts.html#list_contacts/2","title":"Cashtrail.Contacts.list_contacts/2","type":"function"},{"doc":"Updates a contact category. Expected Arguments category - The %Cashtrail.Contacts.Category{} to be updated. params - A map with the field of the category to be updated. See create_category/2 to know about the params that can be given. Returns {:ok, %Cashtrail.Contacts.Category{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; update_category(category, %{field: new_value}) {:ok, %Category{}} iex&gt; update_category(category, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Contacts.html#update_category/2","title":"Cashtrail.Contacts.update_category/2","type":"function"},{"doc":"Updates a contact. Expected Arguments category - The %Cashtrail.Contacts.Category{} to be updated. params - A map with the field of the contact to be updated. See create_contact/2 to know about the params that can be given. Returns {:ok, %Cashtrail.Contacts.Contact{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; update_contact(contact, %{field: new_value}) {:ok, %Contact{}} iex&gt; update_contact(contact, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Contacts.html#update_contact/2","title":"Cashtrail.Contacts.update_contact/2","type":"function"},{"doc":"","ref":"Cashtrail.Contacts.html#t:category/0","title":"Cashtrail.Contacts.category/0","type":"type"},{"doc":"","ref":"Cashtrail.Contacts.html#t:contact/0","title":"Cashtrail.Contacts.contact/0","type":"type"},{"doc":"This is an Ecto.Schema struct that represents an address of the contact. Warning: Don&#39;t use the functions of this module. Only use this module as a struct to represent an address. The functions of this module are internal and can change over time. Only manipulate addresses through the Cashtrail.Contacts that is the context for this. The address is stored in a json field of the contact, and not in a specific table in the database. This struct is used to force the address to a specific schema in this JSON field. Each country has its type of address. So, no fields are required. You can choose to allow only to fill :line_1 and :line_2 in your frontend, or allow fill the other fields instead. Fields :id - The unique id of the address. :street - street part of the address. :number - number part of the address. :complement - complement part of the address, like apartment number for instance. :district - district part of the address. :city - city part of the address. :state - state or province part of the address. This depends on the country. :country - The country of the address. :zip - The zip code of the address. This field is not validated, so you can insert whatever the zip code of any country you want. :line_1 - Line 1 can have the street and number in some countries (like in the US). :line_2 - Line 2 can have the city, state, and zip code in some countries (like in the US). See Cashtrail.Contacts.create_contact/2 to know how to create a contact with an address, or Cashtrail.Contacts.create_contact/2 to know how to update an address of a contact, or insert a new one.","ref":"Cashtrail.Contacts.Address.html","title":"Cashtrail.Contacts.Address","type":"module"},{"doc":"","ref":"Cashtrail.Contacts.Address.html#t:t/0","title":"Cashtrail.Contacts.Address.t/0","type":"type"},{"doc":"This is an Ecto.Schema struct that represents a category of one contact and the entity. Warning: Don&#39;t use the functions of this module. Only use this module as a struct to represent a category. The functions of this module are internal and can change over time. Only manipulate categories through the Cashtrail.Contacts that is the context for this. The category is a way to divide your contacts that have shared characteristics. You may want to divide your contacts into &quot;Friends&quot;, &quot;Family&quot;, &quot;Store&quot;, &quot;Restaurant&quot;, &quot;Bank&quot; and whatever category you want. This can be used to generate reports or to know how much money you are spending on &quot;Restaurants&quot;, for instance. Fields :id - The unique id of the category. :description - The description of the category. :contacts - The contacts that references to this category. :inserted_at - When the category was inserted at the first time. :updated_at - When the category was updated at the last time. See Cashtrail.Contacts to know how to list, get, insert, update, and delete contact categories.","ref":"Cashtrail.Contacts.Category.html","title":"Cashtrail.Contacts.Category","type":"module"},{"doc":"","ref":"Cashtrail.Contacts.Category.html#t:t/0","title":"Cashtrail.Contacts.Category.t/0","type":"type"},{"doc":"This is an Ecto.Schema struct that represents a contact of the entity. Warning: Don&#39;t use the functions of this module. Only use this module as a struct to represent a contact. The functions of this module are internal and can change over time. Only manipulate contacts through the Cashtrail.Contacts that is the context for this. Definition According to the BusinessDictionary.com, this term can be used to describe reaching out to or being in touch with another person, business, or entity. So you can use this module to relate transactions to a person, business, or entity only to know who you received money from or to whom you paid some money, and contact them if necessary. Fields :id - The unique id of the contact. :name - This is the name that you refer to the contact. It can be the most know name of the contact, like the trade name of the company, or a nickname by which the person is well known. :type - The type of contact. This can be: &quot;company&quot; - Used if the contact is a company. This is the default value if no type is chosen &quot;person&quot; - Used if the contact is an individual. :legal_name - This is the name of register in government agencies. This can be the registered name of people or the legal name of companies. :tax_id - This is a number used by governments to as unique identifier of individuals, be a person, be a company. :customer - Says if this contact is a customer. It can be used to filter data. :supplier - Says if this contact is a supplier. It can be used to filter data. :email - The email of the contact. :phone - The phone number of the contact. This field can receive and represents any phone number format. :category - The category of the contact, which is related to Cashtrail.Contacts.Category. :category_id - The id of the category witch the contact belongs to. :address - The address of the contact, represented by the Cashtrail.Contacts.Address struct. :inserted_at - When the contact was inserted at the first time. :updated_at - When the contact was updated at the last time. See Cashtrail.Contacts to know how to list, get, insert, update, and delete contacts.","ref":"Cashtrail.Contacts.Contact.html","title":"Cashtrail.Contacts.Contact","type":"module"},{"doc":"","ref":"Cashtrail.Contacts.Contact.html#t:t/0","title":"Cashtrail.Contacts.Contact.t/0","type":"type"},{"doc":"The Entities context manages the data related to entities. An Entity keeps all financial data of something, that can be a company, financial finances, organization, church, event, etc. And they can have one owner or other members, as well. See Cashtrail.Entities.Entity to have more info about entity.","ref":"Cashtrail.Entities.html","title":"Cashtrail.Entities","type":"module"},{"doc":"Add a user as an entity_member for the entity giving permission. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the member will be added. user - A %Cashtrail.Users.User{} that is the user to be added as a member. The user cannot be the owner of the entity, otherwise, it will return an error. permission - A string with the permission that will be given to the member. It can be: &quot;read&quot;, &quot;write&quot; or &quot;admin&quot;. See Cashtrail.Entities.EntityMember to have more detailed info about the permissions. Returns {:ok, %Cashtrail.Entities.EntityMember{}} in case of success. {:error, :invalid} in case of the user be the owner of the entity. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; add_member(entity, user) {:ok, %EntityMember{}} iex&gt; add_member(entity, invalid_user) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Entities.html#add_member/3","title":"Cashtrail.Entities.add_member/3","type":"function"},{"doc":"Returns a boolean that says if the entity belongs to the user. Expected Arguments user - The %Cashtrail.Users.User{} to be deleted. Examples iex&gt; belongs_to?(%Entity{owner_id: &quot;aaa&quot;}, %User{id: &quot;aaa&quot;}) true iex&gt; belongs_to?(%Entity{owner_id: &quot;bbb&quot;}, %User{id: &quot;aaa&quot;}) false","ref":"Cashtrail.Entities.html#belongs_to?/2","title":"Cashtrail.Entities.belongs_to?/2","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for tracking entity changes. Expected Arguments entity - The %Cashtrail.Entities.Entity{} to be tracked. Examples iex&gt; change_entity(entity) %Ecto.Changeset{source: %Entity{}}","ref":"Cashtrail.Entities.html#change_entity/1","title":"Cashtrail.Entities.change_entity/1","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for tracking entity_member changes. Expected Arguments entity_member - The %Cashtrail.Entities.EntityMember{} to be tracked. Examples iex&gt; change_member(entity_member) %Ecto.Changeset{source: %EntityMember{}}","ref":"Cashtrail.Entities.html#change_member/1","title":"Cashtrail.Entities.change_member/1","type":"function"},{"doc":"Creates an entity. Expected Arguments params - A map with the params of the entity to be created: :name (required) - A string with the name or description of the entity. :type - A string with the type of the entity. It can be &quot;personal&quot;, &quot;company&quot; or &quot;other&quot;. Defaults to &quot;personal&quot;. :owner_id - A string that references to the Cashtrail.Users.User that is the owner of the entity. See Cashtrail.Entities.Entity to have more detailed info about the fields. Returns {:ok, %Cashtrail.Entities.Entity{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; create_entity(user, %{field: value}) {:ok, %Entity{}} iex&gt; create_entity(user, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Entities.html#create_entity/3","title":"Cashtrail.Entities.create_entity/3","type":"function"},{"doc":"Creates an entity_member for the entity. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the member will be created. params - A map with the params of the user to be created: :permission (required) - a string with the permission that will be given to the member. It can be: &quot;read&quot;, &quot;write&quot; or &quot;admin&quot;. :user_id - A string with a reference to one Cashtrail.Users.User to be added as a member to the entity. :user - A map of the Cashtrail.Users.User that should be created as a member of the entity. See Cashtrail.Users.create_user/1 docs to know more about the accepted params. See Cashtrail.Entities.EntityMember to have more detailed info about the fields. Returns {:ok, %Cashtrail.Entities.EntityMember{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; create_member(entity, %{field: value}) {:ok, %EntityMember{}} iex&gt; create_member(entity, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Entities.html#create_member/2","title":"Cashtrail.Entities.create_member/2","type":"function"},{"doc":"Deletes an entity. Expected Arguments entity - The %Cashtrail.Entities.Entity{} to be deleted. Returns {:ok, %Cashtrail.Entities.Entity{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; delete_entity(entity) {:ok, %Entity{}} iex&gt; delete_entity(entity) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Entities.html#delete_entity/2","title":"Cashtrail.Entities.delete_entity/2","type":"function"},{"doc":"Gets a single entity. Raises Ecto.NoResultsError if the Entity does not exist. See Cashtrail.Entities.Entity to have more detailed info about the returned struct. Expected Arguments id - A string that is the unique id of the entity to be found. Examples iex&gt; get_entity!(123) %Entity{} iex&gt; get_entity!(456) ** (Ecto.NoResultsError)","ref":"Cashtrail.Entities.html#get_entity!/1","title":"Cashtrail.Entities.get_entity!/1","type":"function"},{"doc":"Returns the member permission as an atom or :unauthorized if the member is not found. If the user is the owner, return permission as :admin. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the member belongs. user - The %Cashtrail.Users.User{} to know the permission. Examples iex&gt; get_member_permission(entity, user) :admin iex&gt; get_member_permission(entity, another_user) :unauthorized","ref":"Cashtrail.Entities.html#get_member_permission/2","title":"Cashtrail.Entities.get_member_permission/2","type":"function"},{"doc":"Returns a %Cashtrail.Paginator.Page{} struct with a list of entities in the :entries field. Expected arguments options - A keyword list of the following options: :filter =&gt; filters by following attributes: :type or &quot;type&quot; :status or &quot;status&quot; :search =&gt; search entities by :name. See Cashtrail.Paginator.paginate/2 to see paginations options. See Cashtrail.Entities.Entity to have more detailed info about the fields to be filtered or searched. Examples iex&gt; list_entities() %Cashtrail.Paginator.Page{entries: [%Entity{}, ...]} iex&gt; list_entities(filter: %{type: &quot;company&quot;}) %Cashtrail.Paginator.Page{entries: [%Entity{type: &quot;company&quot;}, ...]} iex&gt; list_entities(search: &quot;my&quot;) %Cashtrail.Paginator.Page{entries: [%Entity{name: &quot;My company&quot;}, ...]}","ref":"Cashtrail.Entities.html#list_entities/1","title":"Cashtrail.Entities.list_entities/1","type":"function"},{"doc":"Returns a %Cashtrail.Paginator.Page{} struct with a list of entities in the :entries field from the given user. Expected arguments user - A %Cashtrail.Users.User{} that owns or is member of the entity. options - A keyword list of the following options: :filter =&gt; filters by following attributes: :type or &quot;type&quot; :status or &quot;status&quot; :search =&gt; search entities by :name. See Cashtrail.Paginator.paginate/2 to see paginations options. See Cashtrail.Entities.Entity to have more detailed info about the fields to be filtered or searched. Examples iex&gt; list_entities_from(owner) %Cashtrail.Paginator.Page{entries: [%Entity{}, ...]} iex&gt; list_entities_from(member) %Cashtrail.Paginator.Page{entries: [%Entity{}, ...]}","ref":"Cashtrail.Entities.html#list_entities_from/2","title":"Cashtrail.Entities.list_entities_from/2","type":"function"},{"doc":"Returns a %Cashtrail.Paginator.Page{} struct with a list of entity_members in the :entries field. Expected arguments options - A keyword list of the following options: :filter =&gt; filters by following attributes: :permission or &quot;permission&quot; :search =&gt; search users by its user :name. See Cashtrail.Paginator.paginate/2 to see paginations options. See Cashtrail.Entities.EntityMember to have more detailed info about the fields to be filtered or searched. Examples iex&gt; list_entity_members(entity) %Cashtrail.Paginator.Page{entries: [%EntityMember{}, ...]} iex&gt; list_entity_members(entity, filter: %{permission: &quot;read&quot;}) %Cashtrail.Paginator.Page{entries: [%EntityMember{permission: &quot;read&quot;}, ...]} iex&gt; list_entity_members(entity, search: &quot;my&quot;) %Cashtrail.Paginator.Page{entries: [%EntityMember{user: %User{name: &quot;My Name&quot;}}, ...]}","ref":"Cashtrail.Entities.html#list_members/2","title":"Cashtrail.Entities.list_members/2","type":"function"},{"doc":"Returns the %Cashtrail.Entities.EntityMember{} from the user and the entity. Returns nil if the user is not a member of the entity or if it is the owner. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the member belongs. user - The %Cashtrail.Users.User{} to have the entity_member found. Examples iex&gt; member_from_user(entity, user) %EntityMember{} iex&gt; member_from_user(entity, owner) nil iex&gt; member_from_user(entity, non_member_user) nil","ref":"Cashtrail.Entities.html#member_from_user/2","title":"Cashtrail.Entities.member_from_user/2","type":"function"},{"doc":"Removes an entity_member from the entity. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the member will be removed. user - A %Cashtrail.Users.User{} that is the user to be removed as a member of the given entity. Returns {:ok, %Cashtrail.Entities.EntityMember{}} in case of success. {:error, :not_found} if the user is not a member of the entity. Examples iex&gt; delete_entity_member(entity_member) {:ok, %EntityMember{}} iex&gt; delete_entity_member(entity_member) {:error, :not_found}","ref":"Cashtrail.Entities.html#remove_member/2","title":"Cashtrail.Entities.remove_member/2","type":"function"},{"doc":"Transfer the ownership of an entity from one user to another. Expected Arguments entity - The %Cashtrail.Entities.Entity{} to be transfered. from_user - The %Cashtrail.Users.User{} to be transfered. to_user - The %Cashtrail.Users.User{} to be transfered. Returns {:ok, %Entity{}} if the entity is transfered successfully. {:error, changeset} if to_user is invalid or it&#39;s not found. {:error, :unauthorized} if from_user is not the owner of the entity. Effects After the ownership transference, the previous owner (from_user) becomes a member of the entity with :admin permissions. Examples iex&gt; transfer_ownership(entity, from_user, to_user) {:ok, %Entity{}} iex&gt; transfer_ownership(entity, from_user, to_user) {:error, %Ecto.Changeset{source: %Entity{}}} iex&gt; transfer_ownership(entity, invalid_from, to_user) {:error, :unauthorized}","ref":"Cashtrail.Entities.html#transfer_ownership/3","title":"Cashtrail.Entities.transfer_ownership/3","type":"function"},{"doc":"Updates an entity. Expected Arguments user - The %Cashtrail.Entities.Entity{} to be updated. params - A map with the field of the entity to be updated. See create_entity/2 to know about the params that can be given. Returns {:ok, %Cashtrail.Entities.Entity{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; update_entity(entity, %{field: new_value}) {:ok, %Entity{}} iex&gt; update_entity(entity, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Entities.html#update_entity/2","title":"Cashtrail.Entities.update_entity/2","type":"function"},{"doc":"Updates the member&#39;s permission. If the user is not a member or is the owner, it returns an error. The owner will always have admin permission. Expected Arguments entity - The %Cashtrail.Entities.Entity{} that the member will have the permissions updated. user - A %Cashtrail.Users.User{} that is the user to have the permissions updated. permission - A string with the permission that will be given to the member. It can be: &quot;read&quot;, &quot;write&quot; or &quot;admin&quot;. Returns {:ok, %Cashtrail.Entities.EntityMember{}} in case of success. {:error, :invalid} if the user is the owner of the entity. {:error, :not_found} if the user is not a member of the entity. {:error, %Ecto.Changeset{}} in case of validation errors. Examples iex&gt; update_member_permission(entity, user, &quot;write&quot;) {:ok, %EntityMember{}} iex&gt; update_member_permission(entity, user, &quot;invalid&quot;) {:error, %Ecto.Changeset{}} iex&gt; update_member_permission(entity, owner, &quot;write&quot;) {:error, :invalid} iex&gt; update_member_permission(entity, another_user, &quot;write) {:error, :not_found}","ref":"Cashtrail.Entities.html#update_member_permission/3","title":"Cashtrail.Entities.update_member_permission/3","type":"function"},{"doc":"","ref":"Cashtrail.Entities.html#t:entity/0","title":"Cashtrail.Entities.entity/0","type":"type"},{"doc":"","ref":"Cashtrail.Entities.html#t:entity_member/0","title":"Cashtrail.Entities.entity_member/0","type":"type"},{"doc":"This is an Ecto.Schema struct that represents an entity of the application. Warning: Don&#39;t use the functions of this module. Only use this module as a struct to represent a contact. The functions of this module are internal and can change over time. Only manipulate contacts through the Cashtrail.Entities that is the context for this. Definition According to AccountingTools, an entity is something that maintains a separate and distinct existence. In business, an entity is an organizational structure that has its own goals, processes, and records. According to Techopedia, an entity is any singular, identifiable, and separate object. It refers to individuals, organizations, systems, bits of data, or even distinct system components that are considered significant in and of themselves. So, in this application, an entity is a division of what the data belongs to. This can be an individual, an organization, a department, a church, a group of friends, and whatever you want to control the finances. So you can separate your finances from the company finances. Or have Personal Finances and Family finances separated. Or control the finances of some organization by departments. Each user can create their entity to control their finances and includes other users as a member of the entity. You can see Cashtrail.Entities.EntityMember to know more about this. Multitenancy Each Entity generates a tenant through new schemas in the Postgres database. This happens to separate logically the data of entities. This can help to maintain data integrity and security, as this makes it harder to one data from one entity flow to another entity, like one account trying to relate a currency from another entity, for instance. In this way, I can maintain the database design inside tenants simpler, so I can perform the queries without having to relate two fields, and I can ensure the consistency without recurring to things like composite foreign keys. The downside is that this methodology doesn&#39;t scale well if you want to use this application as a &quot;big and scalable SASS application&quot;. This happens because if I change the database through new migrations, I have to migrate all schemas, and this takes time. This is the same for backups. As the purpose of this application is not to be scalable, but to be safe and flexible, this is not a problem. I recommend you maintain the number of entities at a maximum of 100 per instance of this application. You can manually generate or drop tenants using the Cashtrail.Entities.Tenants module. Fields :id - The unique id of the entity. :name - The name (or description) of the entity. :status - The status of the entity, that can be: &quot;active&quot; - if the entity is used; &quot;archived&quot; -if the entity is no longer used, but you want to keep the data history. :type - The type of the entity, that can be: &quot;personal&quot; - if the entity is used for personal reasons, like control your finances, your family finances, personal project finances, or something like that. &quot;company&quot; - if the entity is used to control the finances of a company. &quot;other&quot; - if the entity is used to control the finances for other reasons. :owner - The owner of the entity. The owner is usually who has created the entity and has all permissions over an entity, including to delete it. If a user is deleted, all his entities are excluded too. The ownership of an entity can be transferred as well. :owner_id - The id of the owner of the entity. :members - The members of the entity. You can read more about this at Cashtrail.Entities.EntityMember. :inserted_at - When the entity was inserted at the first time. :updated_at - When the entity was updated at the last time. See Cashtrail.Entities to know how to list, get, insert, update, delete, and transfer the ownership of an entity.","ref":"Cashtrail.Entities.Entity.html","title":"Cashtrail.Entities.Entity","type":"module"},{"doc":"","ref":"Cashtrail.Entities.Entity.html#t:t/0","title":"Cashtrail.Entities.Entity.t/0","type":"type"},{"doc":"This is an Ecto.Schema struct that represents a member of a Cashtrail.Entity that links authorized users to the Cashtrail.Entity, except the owner. Warning: Don&#39;t use the functions of this module. Only use this module as a struct to represent a contact. The functions of this module are internal and can change over time. Only manipulate contacts through the Cashtrail.Entities that is the context for this. The EntityMember is a member of the entity. As a member of the entity, the user can have permission to read, create and update records, or even admin the entity. The owner cannot be a member of the Cashtrail.Entity. Fields :id - The unique id of the entity member. :permission - The permission of the entity member. The permissions can be: &quot;read&quot; - With this permission, the member can read the data from the entity. &quot;write&quot; - With this permission, the member can read, create, modify, and delete data from the entity, except change the entity settings or manage the members of the entity. &quot;admin&quot; - With this permission, the member can have all permissions from write, change the settings, and manage the members of the entity. :entity - The entity that the member is part of, related to Cashtrail.Entities.Entity. :entity_id - The id of the entity that the member is part of. :user - The user that is a member of the entity, related to Cashtrail.Users.User. :user_id - The id of the user that is member of the entity. :inserted_at - When the entity member was inserted at the first time. :updated_at - When the entity member was updated at the last time. See Cashtrail.Entities to know how to list, get, insert, update, and delete entity members.","ref":"Cashtrail.Entities.EntityMember.html","title":"Cashtrail.Entities.EntityMember","type":"module"},{"doc":"","ref":"Cashtrail.Entities.EntityMember.html#t:t/0","title":"Cashtrail.Entities.EntityMember.t/0","type":"type"},{"doc":"Deals with tenants creation for Entity. Every created Entity should be a tenant and have its data. Tenants are schemas in the Postgres having the data related to the Entity.","ref":"Cashtrail.Entities.Tenants.html","title":"Cashtrail.Entities.Tenants","type":"module"},{"doc":"Create a tenant for the given Entity. Expected arguments A %Cashtrail.Entities.Entity{} struct of the tenant that will be created. Returns {:ok, entity} - If the tenant creation was successful performed. {:error, reason} - In case of errors. See Triplex.create/2 docs for more information.","ref":"Cashtrail.Entities.Tenants.html#create/1","title":"Cashtrail.Entities.Tenants.create/1","type":"function"},{"doc":"Drop a tenant for the given Entity. Expected arguments A %Cashtrail.Entities.Entity{} struct of the tenant that will be dropped. Returns {:ok, entity} - If the tenant creation was successful performed. {:error, reason} - In case of errors. See Triplex.create/2 docs for more information.","ref":"Cashtrail.Entities.Tenants.html#drop/1","title":"Cashtrail.Entities.Tenants.drop/1","type":"function"},{"doc":"Return the given Ecto.Queryable with the prefix configured. Expected arguments queryable - The Ecto.Queryable that the the prefix will be configured. A %Cashtrail.Entities.Entity{} struct of the tenant that want to configure the prefix. See Triplex.to_prefix/1 docs for more information.","ref":"Cashtrail.Entities.Tenants.html#put_prefix/2","title":"Cashtrail.Entities.Tenants.put_prefix/2","type":"function"},{"doc":"Return the prefix from Entity. Expected arguments A %Cashtrail.Entities.Entity{} struct of the tenant that want to get the prefix. See Triplex.to_prefix/1 docs for more information.","ref":"Cashtrail.Entities.Tenants.html#to_prefix/1","title":"Cashtrail.Entities.Tenants.to_prefix/1","type":"function"},{"doc":"Allow fetching paged data with its metadata.","ref":"Cashtrail.Paginator.html","title":"Cashtrail.Paginator","type":"module"},{"doc":"Returns a %Cashtrail.Paginator.Page{} with the entries fetched from a queriable and its page metadata. Expected arguments queriable - A Ecto.Queryable that the query will be performed. options - A keyword with the following possible options: :page - A integer with the number of the page you want to get. :page_size - The size of the page you want to get. It can be: :all to fetch all entries or. any integer value to get the provided count. Example iex&gt; paginate(Entity, page_size: 10) %Cashtrail.Paginator.Page{page_size: 10, page: 1, entries: []} iex&gt; paginate(Entity, page_size: :all) %Cashtrail.Paginator.Page{page_size: 22, page: 1, entries: []}","ref":"Cashtrail.Paginator.html#paginate/2","title":"Cashtrail.Paginator.paginate/2","type":"function"},{"doc":"This module is responsible to generate queries for contexts to filter and search by schema fields.","ref":"Cashtrail.QueryBuilder.html","title":"Cashtrail.QueryBuilder","type":"module"},{"doc":"Returns a Ecto.Query with the queries based on the given filters and allowed fields, or the given Ecto.Queryable without changes. The query will use only the params that have the key in the allowed_filters param. Expected arguments query - The Ecto.Queryable that the query will be performed. params - A map keys of the fields and values to be filtered. The keys can be even string or atom, and the values must be the same type of the data in database, or can receive a list with data in the same type of the data in the database. allowed_fields - A list of atom with the fields that will be used to perform the query. The query will be based only in params that have the keys matching this param. Examples iex&gt; Cashtrail.QueryBuilder.build_filter(Cashtrail.Users.User, nil, []) Cashtrail.Users.User iex&gt; Cashtrail.QueryBuilder.build_filter(Cashtrail.Users.User, %{first_name: &quot;my name&quot;}, [:first_name]) #Ecto.Query iex&gt; Cashtrail.QueryBuilder.build_filter(Cashtrail.Users.User, %{first_name: [&quot;my&quot;, &quot;name&quot;]}, [:first_name]) #Ecto.Query iex&gt; Cashtrail.QueryBuilder.build_filter(Cashtrail.Users.User, %{&quot;first_name&quot; =&gt; &quot;my name&quot;}, [:first_name]) #Ecto.Query iex&gt; Cashtrail.QueryBuilder.build_filter(Cashtrail.Users.User, %{&quot;first_name&quot; =&gt; [&quot;my&quot;, &quot;name&quot;]}, [:first_name]) #Ecto.Query","ref":"Cashtrail.QueryBuilder.html#build_filter/3","title":"Cashtrail.QueryBuilder.build_filter/3","type":"function"},{"doc":"Returns a Ecto.Query with the queries based on the given term and fields, or the given Ecto.Queryable without changes. The search is implement using ILIKE in the fields of the given queryable schema. And the term must be a string. Expected arguments query - The Ecto.Queryable that the query will be performed. term - A string with the text that will be searched. fields - A list of atom with the fields that will be used to perform the query. The given fields must be string or text, otherwise you will get an error from Ecto. Examples iex&gt; Cashtrail.QueryBuilder.build_search(Cashtrail.Users.User, nil, []) Cashtrail.Users.User iex&gt; Cashtrail.QueryBuilder.build_search(Cashtrail.Users.User, &quot;my name&quot;, [:first_name, :last_name]) #Ecto.Query","ref":"Cashtrail.QueryBuilder.html#build_search/3","title":"Cashtrail.QueryBuilder.build_search/3","type":"function"},{"doc":"","ref":"Cashtrail.Repo.html","title":"Cashtrail.Repo","type":"module"},{"doc":"Callback implementation for Ecto.Repo.aggregate/3.","ref":"Cashtrail.Repo.html#aggregate/3","title":"Cashtrail.Repo.aggregate/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.aggregate/4.","ref":"Cashtrail.Repo.html#aggregate/4","title":"Cashtrail.Repo.aggregate/4","type":"function"},{"doc":"Callback implementation for Ecto.Repo.all/2.","ref":"Cashtrail.Repo.html#all/2","title":"Cashtrail.Repo.all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.checkout/2.","ref":"Cashtrail.Repo.html#checkout/2","title":"Cashtrail.Repo.checkout/2","type":"function"},{"doc":"","ref":"Cashtrail.Repo.html#child_spec/1","title":"Cashtrail.Repo.child_spec/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.config/0.","ref":"Cashtrail.Repo.html#config/0","title":"Cashtrail.Repo.config/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.default_options/1.","ref":"Cashtrail.Repo.html#default_options/1","title":"Cashtrail.Repo.default_options/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete/2.","ref":"Cashtrail.Repo.html#delete/2","title":"Cashtrail.Repo.delete/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete!/2.","ref":"Cashtrail.Repo.html#delete!/2","title":"Cashtrail.Repo.delete!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.delete_all/2.","ref":"Cashtrail.Repo.html#delete_all/2","title":"Cashtrail.Repo.delete_all/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.exists?/2.","ref":"Cashtrail.Repo.html#exists?/2","title":"Cashtrail.Repo.exists?/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get/3.","ref":"Cashtrail.Repo.html#get/3","title":"Cashtrail.Repo.get/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get!/3.","ref":"Cashtrail.Repo.html#get!/3","title":"Cashtrail.Repo.get!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by/3.","ref":"Cashtrail.Repo.html#get_by/3","title":"Cashtrail.Repo.get_by/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_by!/3.","ref":"Cashtrail.Repo.html#get_by!/3","title":"Cashtrail.Repo.get_by!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.get_dynamic_repo/0.","ref":"Cashtrail.Repo.html#get_dynamic_repo/0","title":"Cashtrail.Repo.get_dynamic_repo/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.in_transaction?/0.","ref":"Cashtrail.Repo.html#in_transaction?/0","title":"Cashtrail.Repo.in_transaction?/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert/2.","ref":"Cashtrail.Repo.html#insert/2","title":"Cashtrail.Repo.insert/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert!/2.","ref":"Cashtrail.Repo.html#insert!/2","title":"Cashtrail.Repo.insert!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_all/3.","ref":"Cashtrail.Repo.html#insert_all/3","title":"Cashtrail.Repo.insert_all/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update/2.","ref":"Cashtrail.Repo.html#insert_or_update/2","title":"Cashtrail.Repo.insert_or_update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.insert_or_update!/2.","ref":"Cashtrail.Repo.html#insert_or_update!/2","title":"Cashtrail.Repo.insert_or_update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.load/2.","ref":"Cashtrail.Repo.html#load/2","title":"Cashtrail.Repo.load/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one/2.","ref":"Cashtrail.Repo.html#one/2","title":"Cashtrail.Repo.one/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.one!/2.","ref":"Cashtrail.Repo.html#one!/2","title":"Cashtrail.Repo.one!/2","type":"function"},{"doc":"","ref":"Cashtrail.Repo.html#paginate/2","title":"Cashtrail.Repo.paginate/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.preload/3.","ref":"Cashtrail.Repo.html#preload/3","title":"Cashtrail.Repo.preload/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.prepare_query/3.","ref":"Cashtrail.Repo.html#prepare_query/3","title":"Cashtrail.Repo.prepare_query/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.put_dynamic_repo/1.","ref":"Cashtrail.Repo.html#put_dynamic_repo/1","title":"Cashtrail.Repo.put_dynamic_repo/1","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information.","ref":"Cashtrail.Repo.html#query/3","title":"Cashtrail.Repo.query/3","type":"function"},{"doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information.","ref":"Cashtrail.Repo.html#query!/3","title":"Cashtrail.Repo.query!/3","type":"function"},{"doc":"Callback implementation for Ecto.Repo.rollback/1.","ref":"Cashtrail.Repo.html#rollback/1","title":"Cashtrail.Repo.rollback/1","type":"function"},{"doc":"","ref":"Cashtrail.Repo.html#scrivener_defaults/0","title":"Cashtrail.Repo.scrivener_defaults/0","type":"function"},{"doc":"Callback implementation for Ecto.Repo.start_link/1.","ref":"Cashtrail.Repo.html#start_link/1","title":"Cashtrail.Repo.start_link/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stop/1.","ref":"Cashtrail.Repo.html#stop/1","title":"Cashtrail.Repo.stop/1","type":"function"},{"doc":"Callback implementation for Ecto.Repo.stream/2.","ref":"Cashtrail.Repo.html#stream/2","title":"Cashtrail.Repo.stream/2","type":"function"},{"doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information.","ref":"Cashtrail.Repo.html#to_sql/2","title":"Cashtrail.Repo.to_sql/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.transaction/2.","ref":"Cashtrail.Repo.html#transaction/2","title":"Cashtrail.Repo.transaction/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update/2.","ref":"Cashtrail.Repo.html#update/2","title":"Cashtrail.Repo.update/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update!/2.","ref":"Cashtrail.Repo.html#update!/2","title":"Cashtrail.Repo.update!/2","type":"function"},{"doc":"Callback implementation for Ecto.Repo.update_all/3.","ref":"Cashtrail.Repo.html#update_all/3","title":"Cashtrail.Repo.update_all/3","type":"function"},{"doc":"The Users context manages the users data of one entity and performs user authentication. See Cashtrail.Users.User to have more info about user.","ref":"Cashtrail.Users.html","title":"Cashtrail.Users","type":"module"},{"doc":"Authenticates a user with its email and password. Expected Arguments email - A string that is the email of the user. password - A string that is the expected password of the user. Returns {:ok, user} if user is found and the passwords match. {:error, :unauthorized} if passwords does not match. {:error, :not_found} if user email is not found. Examples iex&gt; authenticate(email, password) {:ok, %User{}} iex&gt; authenticate(email, wrong_pass) {:error, :unauthorized} iex&gt; authenticate(wrong_email, password) {:error, :not_found}","ref":"Cashtrail.Users.html#authenticate/2","title":"Cashtrail.Users.authenticate/2","type":"function"},{"doc":"Returns an %Ecto.Changeset{} for tracking user changes. Expected Arguments user - The %Cashtrail.Users.User{} to be tracked. Examples iex&gt; change_user(user) %Ecto.Changeset{source: %User{}}","ref":"Cashtrail.Users.html#change_user/1","title":"Cashtrail.Users.change_user/1","type":"function"},{"doc":"Creates a user. Expected Arguments params - A map with the params of the user to be created: :email (required) - A string with the email of the user. Must be a valid email and unique in the application. :first_name (required) - A string with the first name of the user. :last_name - A string with the last name of the user. :password (required) - A string with the password of the user to be created. The password must contain at least one letter, one number, and one special character. :password_confirmation (required) - A string with password confirmation of the user to be created. Must be the equals the :password field. See Cashtrail.Users.User to have more detailed info about the fields. Returns {:ok, %Cashtrail.Users.User{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; create_user(%{field: value}) {:ok, %User{}} iex&gt; create_user(%{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Users.html#create_user/1","title":"Cashtrail.Users.create_user/1","type":"function"},{"doc":"Deletes a user. Expected Arguments user - The %Cashtrail.Users.User{} to be deleted. Returns {:ok, %Cashtrail.Users.User{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; delete_user(user) {:ok, %User{}} iex&gt; delete_user(user) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Users.html#delete_user/1","title":"Cashtrail.Users.delete_user/1","type":"function"},{"doc":"Gets a single user. Raises Ecto.NoResultsError if the User does not exist. See Cashtrail.Users.User to have more detailed info about the returned struct. Expected Arguments id - A string that is the unique id of the user to be found. Examples iex&gt; get_user!(123) %User{} iex&gt; get_user!(456) ** (Ecto.NoResultsError)","ref":"Cashtrail.Users.html#get_user!/1","title":"Cashtrail.Users.get_user!/1","type":"function"},{"doc":"Gets a single user by the given param. Returns nil the User does not exist. See Cashtrail.Users.User to have more detailed info about the returned struct and the params attributes that can be given. Expected Arguments params - A keyword or a map with the attributes of the user to be found. Examples iex&gt; get_user_by(email: &quot;john@example.com&quot;) %User{} iex&gt; get_user_by(email: &quot;noexists&#39;) nil","ref":"Cashtrail.Users.html#get_user_by/1","title":"Cashtrail.Users.get_user_by/1","type":"function"},{"doc":"Returns a %Cashtrail.Paginator.Page{} struct with a list of users in the :entries field. Expected arguments options - A keyword list of the following options: :search - search users by :first_name, :last_name or :email. See Cashtrail.Paginator.paginate/2 to see the paginations options. See Cashtrail.Users.User to have more detailed info about the fields to be filtered or searched. Examples iex&gt; list_users() %Cashtrail.Paginator{entries: [%User{}, ...]} iex&gt; list_users(search: &quot;my&quot;) %Cashtrail.Paginator{entries: [%User{first_name: &quot;My name&quot;}, ...]}","ref":"Cashtrail.Users.html#list_users/1","title":"Cashtrail.Users.list_users/1","type":"function"},{"doc":"Updates a user. Expected Arguments user - The %Cashtrail.Users.User{} to be updated. params - A map with the field of the user to be updated. See create_user/2 to know about the params that can be given. Returns {:ok, %Cashtrail.Users.User{}} in case of success. {:error, %Ecto.Changeset{}} in case of error. Examples iex&gt; update_user(user, %{field: new_value}) {:ok, %User{}} iex&gt; update_user(user, %{field: bad_value}) {:error, %Ecto.Changeset{}}","ref":"Cashtrail.Users.html#update_user/2","title":"Cashtrail.Users.update_user/2","type":"function"},{"doc":"","ref":"Cashtrail.Users.html#t:user/0","title":"Cashtrail.Users.user/0","type":"type"},{"doc":"This is an Ecto.Schema struct that represents a user of the application. Warning: Don&#39;t use the functions of this module. Only use this module as a struct to represent a contact. The functions of this module are internal and can change over time. Only manipulate contacts through the Cashtrail.Users that is the context for this. The user is any individual that uses the application. They can create their entities or be assigned to an entity as a member. See Cashtrail.Entities.Entity to know more about what is an Entity. Fields :id - The unique id of the user. :email - The email address of the user. This must be unique in the whole application. :first_name - The first name of the user. :last_name - The last name of the user. :password - This is a virtual field used to the users input their passwords. When a user is retrieved, this value is empty. :password_hash - This field keeps the hashed password. You can search more about hashing algorithms or see Comeonin to know more about it. :entities - The entities that the user is owner. :inserted_at - When the user was inserted at the first time. :updated_at - When the user was updated at the last time. See Cashtrail.Users to know how to list, get, insert, update, delete, and authenticate users.","ref":"Cashtrail.Users.User.html","title":"Cashtrail.Users.User","type":"module"},{"doc":"","ref":"Cashtrail.Users.User.html#t:t/0","title":"Cashtrail.Users.User.t/0","type":"type"},{"doc":"The entrypoint for defining your web interface, such as controllers, views, channels and so on. This can be used in your application as: use CashtrailWeb, :controller use CashtrailWeb, :view The definitions below will be executed for every view, controller, etc, so keep them short and clean, focused on imports, uses and aliases. Do NOT define functions inside the quoted expressions below. Instead, define any helper function in modules and import those modules here.","ref":"CashtrailWeb.html","title":"CashtrailWeb","type":"module"},{"doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"CashtrailWeb.html#__using__/1","title":"CashtrailWeb.__using__/1","type":"macro"},{"doc":"","ref":"CashtrailWeb.html#channel/0","title":"CashtrailWeb.channel/0","type":"function"},{"doc":"","ref":"CashtrailWeb.html#controller/0","title":"CashtrailWeb.controller/0","type":"function"},{"doc":"","ref":"CashtrailWeb.html#router/0","title":"CashtrailWeb.router/0","type":"function"},{"doc":"","ref":"CashtrailWeb.html#view/0","title":"CashtrailWeb.view/0","type":"function"},{"doc":"Conveniences for translating and building error messages.","ref":"CashtrailWeb.ErrorHelpers.html","title":"CashtrailWeb.ErrorHelpers","type":"module"},{"doc":"Translates an error message using gettext.","ref":"CashtrailWeb.ErrorHelpers.html#translate_error/1","title":"CashtrailWeb.ErrorHelpers.translate_error/1","type":"function"},{"doc":"A module providing Internationalization with a gettext-based API. By using Gettext, your module gains a set of macros for translations, for example: import CashtrailWeb.Gettext # Simple translation gettext(&quot;Here is the string to translate&quot;) # Plural translation ngettext(&quot;Here is the string to translate&quot;, &quot;Here are the strings to translate&quot;, 3) # Domain-based translation dgettext(&quot;errors&quot;, &quot;Here is the error message to translate&quot;) See the Gettext Docs for detailed usage.","ref":"CashtrailWeb.Gettext.html","title":"CashtrailWeb.Gettext","type":"module"},{"doc":"Callback implementation for Gettext.Backend.dgettext/3.","ref":"CashtrailWeb.Gettext.html#dgettext/3","title":"CashtrailWeb.Gettext.dgettext/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dgettext_noop/2.","ref":"CashtrailWeb.Gettext.html#dgettext_noop/2","title":"CashtrailWeb.Gettext.dgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext/5.","ref":"CashtrailWeb.Gettext.html#dngettext/5","title":"CashtrailWeb.Gettext.dngettext/5","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext_noop/3.","ref":"CashtrailWeb.Gettext.html#dngettext_noop/3","title":"CashtrailWeb.Gettext.dngettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpgettext/4.","ref":"CashtrailWeb.Gettext.html#dpgettext/4","title":"CashtrailWeb.Gettext.dpgettext/4","type":"macro"},{"doc":"","ref":"CashtrailWeb.Gettext.html#dpgettext_noop/3","title":"CashtrailWeb.Gettext.dpgettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpngettext/6.","ref":"CashtrailWeb.Gettext.html#dpngettext/6","title":"CashtrailWeb.Gettext.dpngettext/6","type":"macro"},{"doc":"","ref":"CashtrailWeb.Gettext.html#dpngettext_noop/4","title":"CashtrailWeb.Gettext.dpngettext_noop/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext/2.","ref":"CashtrailWeb.Gettext.html#gettext/2","title":"CashtrailWeb.Gettext.gettext/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_comment/1.","ref":"CashtrailWeb.Gettext.html#gettext_comment/1","title":"CashtrailWeb.Gettext.gettext_comment/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_noop/1.","ref":"CashtrailWeb.Gettext.html#gettext_noop/1","title":"CashtrailWeb.Gettext.gettext_noop/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_bindings/2.","ref":"CashtrailWeb.Gettext.html#handle_missing_bindings/2","title":"CashtrailWeb.Gettext.handle_missing_bindings/2","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_plural_translation/6.","ref":"CashtrailWeb.Gettext.html#handle_missing_plural_translation/6","title":"CashtrailWeb.Gettext.handle_missing_plural_translation/6","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_translation/4.","ref":"CashtrailWeb.Gettext.html#handle_missing_translation/4","title":"CashtrailWeb.Gettext.handle_missing_translation/4","type":"function"},{"doc":"","ref":"CashtrailWeb.Gettext.html#lgettext/5","title":"CashtrailWeb.Gettext.lgettext/5","type":"function"},{"doc":"","ref":"CashtrailWeb.Gettext.html#lngettext/7","title":"CashtrailWeb.Gettext.lngettext/7","type":"function"},{"doc":"Callback implementation for Gettext.Backend.ngettext/4.","ref":"CashtrailWeb.Gettext.html#ngettext/4","title":"CashtrailWeb.Gettext.ngettext/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.ngettext_noop/2.","ref":"CashtrailWeb.Gettext.html#ngettext_noop/2","title":"CashtrailWeb.Gettext.ngettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pgettext/3.","ref":"CashtrailWeb.Gettext.html#pgettext/3","title":"CashtrailWeb.Gettext.pgettext/3","type":"macro"},{"doc":"","ref":"CashtrailWeb.Gettext.html#pgettext_noop/2","title":"CashtrailWeb.Gettext.pgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pngettext/5.","ref":"CashtrailWeb.Gettext.html#pngettext/5","title":"CashtrailWeb.Gettext.pngettext/5","type":"macro"},{"doc":"","ref":"CashtrailWeb.Gettext.html#pngettext_noop/3","title":"CashtrailWeb.Gettext.pngettext_noop/3","type":"macro"},{"doc":"Module with named helpers generated from CashtrailWeb.Router.","ref":"CashtrailWeb.Router.Helpers.html","title":"CashtrailWeb.Router.Helpers","type":"module"},{"doc":"","ref":"CashtrailWeb.Router.Helpers.html#live_dashboard_path/2","title":"CashtrailWeb.Router.Helpers.live_dashboard_path/2","type":"function"},{"doc":"","ref":"CashtrailWeb.Router.Helpers.html#live_dashboard_path/3","title":"CashtrailWeb.Router.Helpers.live_dashboard_path/3","type":"function"},{"doc":"","ref":"CashtrailWeb.Router.Helpers.html#live_dashboard_path/4","title":"CashtrailWeb.Router.Helpers.live_dashboard_path/4","type":"function"},{"doc":"","ref":"CashtrailWeb.Router.Helpers.html#live_dashboard_path/5","title":"CashtrailWeb.Router.Helpers.live_dashboard_path/5","type":"function"},{"doc":"","ref":"CashtrailWeb.Router.Helpers.html#live_dashboard_url/2","title":"CashtrailWeb.Router.Helpers.live_dashboard_url/2","type":"function"},{"doc":"","ref":"CashtrailWeb.Router.Helpers.html#live_dashboard_url/3","title":"CashtrailWeb.Router.Helpers.live_dashboard_url/3","type":"function"},{"doc":"","ref":"CashtrailWeb.Router.Helpers.html#live_dashboard_url/4","title":"CashtrailWeb.Router.Helpers.live_dashboard_url/4","type":"function"},{"doc":"","ref":"CashtrailWeb.Router.Helpers.html#live_dashboard_url/5","title":"CashtrailWeb.Router.Helpers.live_dashboard_url/5","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"CashtrailWeb.Router.Helpers.html#path/2","title":"CashtrailWeb.Router.Helpers.path/2","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"CashtrailWeb.Router.Helpers.html#static_integrity/2","title":"CashtrailWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"CashtrailWeb.Router.Helpers.html#static_path/2","title":"CashtrailWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"CashtrailWeb.Router.Helpers.html#static_url/2","title":"CashtrailWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"CashtrailWeb.Router.Helpers.html#url/1","title":"CashtrailWeb.Router.Helpers.url/1","type":"function"}]